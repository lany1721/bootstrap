<?xml version="1.0" encoding="UTF-8"?>
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 继承spring默认的日志配置 -->
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <!-- %clr(){颜色名}: org.springframework.boot.logging.logback.ColorConverter springboot提供的彩色日志渲染类
                日志级别默认颜色      颜色名:blue cyan faint green magenta red yellow
                Level - Color
                FATAL - Red
                ERROR - Red
                WARN - Yellow
                INFO - Green
                DEBUG - Green
                TRACE - Green
        -->
    <!-- %d{}: 格式化时间 -->
    <!-- ${PID}: 进程id -->
    <!-- %p: 日志级别 -->
    <!-- %15.15():如果记录的线程字符长度小于15(第一个)则用空格在左侧补齐,如果字符长度大于15(第二个),则从开头开始截断多余的字符 -->
    <!-- %X{uid:-system}: MDC获取uid,默认为system -->
    <!-- %m：日志打印详情 -->
    <!-- %n: 换行符 -->

    <!-- application name -->
    <property value="bootstrap" name="APPLICATION_NAME"/>
    <property value="${LOG_PATH:-logs}" name="LOG_PATH"/>
    <!-- console pattern -->
    <property
            value="%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr(%X{traceId:-system}){yellow} %clr(%X{userId:-unknown}){blue} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
            name="CONSOLE_PATTERN"/>

    <!--file pattern-->
    <property
            value="%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- %X{traceId} %X{id:-system} [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
            name="FILE_PATTERN"/>

    <!-- appender是configuration的子节点，是负责写日志的组件。 -->
    <!-- 1. 把日志输出到控制台 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 2. 输出到文档 -->
    <!-- 2.1 level为 DEBUG 日志，时间滚动输出 -->
    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${LOG_PATH}/debug.log</file>
        <!-- 日志文档输出格式 -->
        <encoder>
            <pattern>${FILE_PATTERN}</pattern>
            <charset>UTF-8</charset> <!-- 设置字符集 -->
        </encoder>
        <!-- 日志记录器的滚动策略，按日期、大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <!-- 文件名：logs/debug.2020-09-05.0.log -->
            <fileNamePattern>${LOG_PATH}/debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 应用重启时清除日志 -->
            <cleanHistoryOnStart>${LOG_FILE_CLEAN_HISTORY_ON_START:-false}</cleanHistoryOnStart>
            <!-- 日志文件大小，默认10MB -->
            <maxFileSize>${LOG_FILE_MAX_SIZE:-100MB}</maxFileSize>
            <!-- 日志文档保留天数，默认30天 -->
            <maxHistory>${LOG_FILE_MAX_HISTORY:-3}</maxHistory>
            <!-- 当日志文件总大小达到多少时强制删除多余的日志,默认为0，代表不删除。eg：20GB -->
            <totalSizeCap>${LOG_FILE_TOTAL_SIZE_CAP:-0}</totalSizeCap>
        </rollingPolicy>
        <!-- 此日志文档只记录debug级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 2.2 level为 INFO 日志，时间滚动输出 -->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${LOG_PATH}/info.log</file>
        <!-- 日志文档输出格式 -->
        <encoder>
            <pattern>${FILE_PATTERN}</pattern>
            <charset>UTF-8</charset> <!-- 设置字符集 -->
        </encoder>
        <!-- 日志记录器的滚动策略，按日期、大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <!-- 文件名：logs/info.2020-09-05.0.log -->
            <fileNamePattern>${LOG_PATH}/info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 应用重启时清除日志 -->
            <cleanHistoryOnStart>${LOG_FILE_CLEAN_HISTORY_ON_START:-false}</cleanHistoryOnStart>
            <!-- 日志文件大小，默认10MB -->
            <maxFileSize>${LOG_FILE_MAX_SIZE:-100MB}</maxFileSize>
            <!-- 日志文档保留天数，默认30天 -->
            <maxHistory>${LOG_FILE_MAX_HISTORY:-15}</maxHistory>
            <!-- 当日志文件总大小达到多少时强制删除多余的日志,默认为0，代表不删除。eg：20GB -->
            <totalSizeCap>${LOG_FILE_TOTAL_SIZE_CAP:-0}</totalSizeCap>
        </rollingPolicy>
        <!-- 此日志文档只记录info级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 2.3 level为 WARN 日志，时间滚动输出 -->
    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${LOG_PATH}/warn.log</file>
        <!-- 日志文档输出格式 -->
        <encoder>
            <pattern>${FILE_PATTERN}</pattern>
            <charset>UTF-8</charset> <!-- 设置字符集 -->
        </encoder>
        <!-- 日志记录器的滚动策略，按日期、大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <!-- 文件名：logs/warn.2020-09-05.0.log -->
            <fileNamePattern>${LOG_PATH}/warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 应用重启时清除日志 -->
            <cleanHistoryOnStart>${LOG_FILE_CLEAN_HISTORY_ON_START:-false}</cleanHistoryOnStart>
            <!-- 日志文件大小，默认10MB -->
            <maxFileSize>${LOG_FILE_MAX_SIZE:-100MB}</maxFileSize>
            <!-- 日志文档保留天数，默认30天 -->
            <maxHistory>${LOG_FILE_MAX_HISTORY:-20}</maxHistory>
            <!-- 当日志文件总大小达到多少时强制删除多余的日志,默认为0，代表不删除。eg：20GB -->
            <totalSizeCap>${LOG_FILE_TOTAL_SIZE_CAP:-0}</totalSizeCap>
        </rollingPolicy>
        <!-- 此日志文档只记录warn级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 2.3 level为 ERROR 日志，时间滚动输出 -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${LOG_PATH}/error.log</file>
        <!-- 日志文档输出格式 -->
        <encoder>
            <pattern>${FILE_PATTERN}</pattern>
            <charset>UTF-8</charset> <!-- 设置字符集 -->
        </encoder>
        <!-- 日志记录器的滚动策略，按日期、大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <!-- 文件名：logs/error.2020-09-05.0.log -->
            <fileNamePattern>${LOG_PATH}/error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 应用重启时清除日志 -->
            <cleanHistoryOnStart>${LOG_FILE_CLEAN_HISTORY_ON_START:-false}</cleanHistoryOnStart>
            <!-- 日志文件大小，默认10MB -->
            <maxFileSize>${LOG_FILE_MAX_SIZE:-100MB}</maxFileSize>
            <!-- 日志文档保留天数，默认30天 -->
            <maxHistory>${LOG_FILE_MAX_HISTORY:-30}</maxHistory>
            <!-- 当日志文件总大小达到多少时强制删除多余的日志,默认为0，代表不删除。eg：20GB -->
            <totalSizeCap>${LOG_FILE_TOTAL_SIZE_CAP:-0}</totalSizeCap>
        </rollingPolicy>
        <!-- 此日志文档只记录error级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 本地环境打印到控制台 -->
    <springProfile name="local">
        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
        </root>
    </springProfile>

    <!-- 开发环境 -->
    <springProfile name="dev">
        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="DEBUG_FILE"/>
            <appender-ref ref="INFO_FILE"/>
            <appender-ref ref="WARN_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
        </root>
    </springProfile>

    <!-- 测试环境-->
    <springProfile name="test">
        <root level="INFO">
            <appender-ref ref="DEBUG_FILE"/>
            <appender-ref ref="INFO_FILE"/>
            <appender-ref ref="WARN_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
        </root>
    </springProfile>

    <!-- 生产环境输出到文件 -->
    <springProfile name="pro">
        <root level="INFO">
            <appender-ref ref="DEBUG_FILE"/>
            <appender-ref ref="INFO_FILE"/>
            <appender-ref ref="WARN_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
        </root>
    </springProfile>


</configuration>